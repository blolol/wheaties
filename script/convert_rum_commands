#!/usr/bin/env ruby

require "pp"
require "rubygems"
require "active_record"
require "mongo_mapper"

class Factoid < ActiveRecord::Base
  set_table_name "infobot_factoids"
  has_many :definitions
  
  def sanitized_name
    name.downcase.gsub(/[\s\.]+/, "_")
  end
end

class Definition < ActiveRecord::Base
  set_table_name "infobot_definitions"
  belongs_to :factoid
  
  def sanitized_body
    body.toutf8.gsub(/^\s*(\\)?(<.*?>)/) do |match|
      $~[1].nil? ? "" : $~[2]
    end
  end
end

def setup
  load_config
  load_active_record
  load_mongo
  load_grunt
end

def load_config
  config_filename = File.join(File.dirname(__FILE__), "convert_rum_commands.yml")
  @config = YAML.load_file(config_filename)
end

def load_active_record
  options = @config["database"]["autumn"]
  ActiveRecord::Base.establish_connection(options)
end

def load_mongo
  host = @config["database"]["grunt"]["host"]
  database = @config["database"]["grunt"]["database"]
  MongoMapper.connection = Mongo::Connection.new(host)
  MongoMapper.database = database
end

def load_grunt
  $:.unshift(File.join(File.dirname(__FILE__), "..", "lib"))
  require "grunt/models/command"
end

def convert!
  Factoid.all.each do |factoid|
    unless factoid.name =~ /^[a-zA-Z0-9_\s\.\-]+$/
      puts "Skipped #{factoid.name.inspect}: name too tricky to convert"
      next
    end
    
    command = {
      :name => factoid.sanitized_name,
      :type => "plain_text",
      :body => factoid.definitions.map { |definition| definition.sanitized_body }.join("\n"),
      :created_by => @config["commands"]["creator"]
    }
    
    begin
      Grunt::Models::Command.create!(command)
      puts "Converted #{factoid.name.inspect} => #{command[:name].inspect}"
    rescue MongoMapper::DocumentNotValid => e
      puts "Skipped #{factoid.name.inspect} => #{command[:name].inspect}: #{e.message}"
    end
  end
end

setup
convert!
